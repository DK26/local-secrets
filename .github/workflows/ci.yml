name: CI

# Enhanced CI pipeline for local-secrets inspired by strict-path-rs
# Comprehensive testing across platforms with security validation
# and keyring backend testing

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Validate file encodings
      shell: bash
      run: |
        echo "üîç Validating UTF-8 encoding for critical files..."

        check_with_file_cmd() {
          local f="$1"
          if ! [ -f "$f" ]; then
            echo "‚ùå File not found: $f"; return 1
          fi
          if command -v file >/dev/null 2>&1; then
            if file "$f" | grep -qE 'UTF-8|ASCII|text|[Ss]ource'; then
              echo "‚úÖ $f: UTF-8 encoding verified"
              return 0
            else
              echo "‚ùå $f is not UTF-8 encoded"; return 1
            fi
          fi
          return 0
        }

        # Critical files for local-secrets
        check_with_file_cmd README.md || exit 1
        check_with_file_cmd Cargo.toml || exit 1
        
        # Check for UTF-8 BOM (should not be present)
        if command -v xxd >/dev/null 2>&1 && head -c 3 README.md | xxd | grep -qi efbbbf; then
          echo "‚ùå README.md contains UTF-8 BOM"; exit 1
        fi

        # Source files
        if [ -d "src" ]; then
          while IFS= read -r -d '' f; do
            check_with_file_cmd "$f" || exit 1
          done < <(find src -type f -name '*.rs' -print0)
          echo "‚úÖ UTF-8 verified for all source files"
        fi

        # Test files  
        if [ -d "tests" ]; then
          while IFS= read -r -d '' f; do
            check_with_file_cmd "$f" || exit 1
          done < <(find tests -type f -name '*.rs' -print0)
          echo "‚úÖ UTF-8 verified for all test files"
        fi

        echo "üéâ All file encoding checks passed!"
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Show formatting diff (if check failed)
      if: failure()
      run: |
        echo "‚ùå Formatting check failed. Run 'cargo fmt --all' to fix."
        echo "Here's what would be changed:"
        cargo fmt --all -- --check --verbose || true
        echo ""
        echo "To fix locally, run: cargo fmt --all"

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Show clippy fixes (if check failed)  
      if: failure()
      run: |
        echo "‚ùå Clippy check failed. Some issues might be auto-fixable."
        echo "To fix locally, run: cargo clippy --fix --allow-dirty --allow-staged --all-targets --all-features"
        echo "Then run: cargo clippy --all-targets --all-features -- -D warnings"

    - name: Run unit tests
      run: cargo test --lib --verbose
      env:
        LOCAL_SECRETS_TEST_MODE: "1"
        LOCAL_SECRETS_BACKEND: "memory"

    - name: Run integration tests  
      run: cargo test --test cli --test security_tests --verbose
      env:
        LOCAL_SECRETS_TEST_MODE: "1"
        LOCAL_SECRETS_BACKEND: "memory"

    - name: Test with test-secret-param feature
      run: cargo test --test automated_store_tests --features test-secret-param --verbose
      env:
        LOCAL_SECRETS_TEST_MODE: "1"
        LOCAL_SECRETS_BACKEND: "memory"

    - name: Test CLI functionality
      run: |
        # Test help output
        cargo run --release -- --help
        cargo run --release -- store --help  
        cargo run --release -- delete --help
      env:
        LOCAL_SECRETS_TEST_MODE: "1"

    - name: Build release binary (size optimized)
      run: cargo build --release

    - name: Test keyring backend (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Testing keyring backend availability on ${{ matrix.os }}"
        # Test that keyring backend can be created (will fail gracefully if no keyring service)
        timeout 30 bash -c 'echo "test123" | cargo run -- store TEST_KEYRING_CHECK' || true
        timeout 30 cargo run -- delete TEST_KEYRING_CHECK || true
      env:
        LOCAL_SECRETS_TEST_MODE: ""  # Use actual keyring

    - name: Test keyring backend (Windows)  
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        echo "Testing Windows Credential Manager backend"
        # Windows should always have Credential Manager available
        $env:LOCAL_SECRETS_TEST_SECRET="test123"
        cargo run -- store TEST_KEYRING_CHECK
        cargo run -- delete TEST_KEYRING_CHECK
      env:
        LOCAL_SECRETS_TEST_MODE: ""  # Use actual keyring

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features
      env:
        RUSTDOCFLAGS: -D warnings

    - name: Test documentation examples
      run: cargo test --doc --verbose

  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: Run security audit
        run: cargo audit
      - name: Run security-focused tests
        run: cargo test --test security_tests --verbose
        env:
          LOCAL_SECRETS_TEST_MODE: "1"
          LOCAL_SECRETS_BACKEND: "memory"

  build-release:
    name: Build release binaries (${{ matrix.target }})
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test, security-audit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev
      - name: cargo build --release
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package tarball
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxuo pipefail
          BIN_NAME=local-secrets
          TARGET_DIR=target/${{ matrix.target }}/release
          DIST=dist
          mkdir -p "$DIST"
          ARCHIVE="$DIST/${BIN_NAME}-${{ matrix.target }}.tar.gz"
          tar -czf "$ARCHIVE" -C "$TARGET_DIR" "$BIN_NAME"
      - name: Package zip
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $BinName = "local-secrets"
          $TargetDir = "target/${{ matrix.target }}/release"
          $Dist = "dist"
          New-Item -ItemType Directory -Path $Dist -Force | Out-Null
          $BinaryPath = Join-Path $TargetDir "$BinName.exe"
          $Archive = Join-Path $Dist "$BinName-${{ matrix.target }}.zip"
          Compress-Archive -Path $BinaryPath -DestinationPath $Archive -Force
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: dist/*
          if-no-files-found: error

  publish-release:
    name: Publish GitHub release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true
      - name: Generate checksums
        shell: bash
        run: |
          set -euxuo pipefail
          cd release
          shasum -a 256 * > SHA256SUMS
      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
