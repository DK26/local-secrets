name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

permissions:
  contents: write

jobs:
  checks:
    name: Lint & test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev
      - name: cargo fmt
        run: cargo fmt --all -- --check
      - name: cargo clippy
        run: cargo clippy --all-targets -- -D warnings
      - name: cargo test
        run: cargo test --all-targets

  build-release:
    name: Build release binaries (${{ matrix.target }})
    if: startsWith(github.ref, 'refs/tags/')
    needs: checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libdbus-1-dev
      - name: cargo build --release
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package tarball
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxuo pipefail
          BIN_NAME=local-secrets
          TARGET_DIR=target/${{ matrix.target }}/release
          DIST=dist
          mkdir -p "$DIST"
          ARCHIVE="$DIST/${BIN_NAME}-${{ matrix.target }}.tar.gz"
          tar -czf "$ARCHIVE" -C "$TARGET_DIR" "$BIN_NAME"
      - name: Package zip
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $BinName = "local-secrets"
          $TargetDir = "target/${{ matrix.target }}/release"
          $Dist = "dist"
          New-Item -ItemType Directory -Path $Dist -Force | Out-Null
          $BinaryPath = Join-Path $TargetDir "$BinName.exe"
          $Archive = Join-Path $Dist "$BinName-${{ matrix.target }}.zip"
          Compress-Archive -Path $BinaryPath -DestinationPath $Archive -Force
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: dist/*
          if-no-files-found: error

  publish-release:
    name: Publish GitHub release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true
      - name: Generate checksums
        shell: bash
        run: |
          set -euxuo pipefail
          cd release
          shasum -a 256 * > SHA256SUMS
      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
